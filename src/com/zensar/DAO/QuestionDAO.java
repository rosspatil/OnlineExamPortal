package com.zensar.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.zensar.bean.Question;
import com.zensar.bean.User;
import com.zensar.util.db.ConnectionFactory;

public class QuestionDAO {

	public List<Question> questions = new ArrayList<Question>();
	public List<String> answers = new ArrayList<String>();

	public List<String> initHashMap() {
		List<String> map = new ArrayList<String>();
		;
		for (int i = 0; i < 15; i++) {
			map.add(i, "0");
		}
		return map;
	}

	public void setQuestions() {
		Connection con = ConnectionFactory.getConnection();
		String sql = "SELECT * FROM question_details";

		PreparedStatement stmt;
		try {
			stmt = con.prepareStatement(sql);
			ResultSet rs = stmt.executeQuery();
			while (rs.next()) {
				List<String> list = new ArrayList<>();
				for (int i = 3; i <= 6; i++) {
					list.add(rs.getString(i));
				}

				Question question = new Question(rs.getInt(1), rs.getString(2),
						list, rs.getString(7));
				this.questions.add(question);
				this.answers.add(question.getAnswer());
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	public int calculateResult(ArrayList<String> attribute, User user) {
		int score = 0;
		for (int i = 0; i < 15; i++) {
			if (this.answers.get(i).trim().equals(attribute.get(i))) {
				score += 4;
			}
		}

		Connection con = ConnectionFactory.getConnection();
		try {
			PreparedStatement stmt = con
					.prepareStatement("INSERT INTO result values (?,?)");
			stmt.setString(1, user.getEmail());
			stmt.setInt(2, score);
			stmt.executeUpdate();
			stmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return score;

	}

	public void sendEmail(User user, int score, String email) {

		String name = user.getFirstName() + " " + user.getLastName();
		final String userName = "patilroshan443@gmail.com";
		final String password = "2310r231o";

		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.starttls.enable", "true");
		props.put("mail.smtp.host", "smtp.gmail.com");
		props.put("mail.smtp.port", "587");
		props.setProperty("proxySet", "true");
		props.setProperty("socksProxyHost", "172.16.15.253");
		props.setProperty("socksProxyPort", "4647");

		Session sessionM = Session.getInstance(props, new Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(userName, password);
			}
		});

		Message message = new MimeMessage(sessionM);
		try {
			message.setFrom(new InternetAddress("patilroshan443@gmail.com"));
			message.setRecipients(Message.RecipientType.TO,
					InternetAddress.parse(email.trim()));
			message.setSubject("ONLINE EXAM PORTAL Result");
			message.setText("Hello "
					+ name
					+ ","
					+ "\n\n This is automated mail generated By ONLINE EXAM PORTAL.\n"
					+ "You have successfully completed online test and your respective"
					+ " Score is\t" + score + "\n\n"
					+ "Thank you for attempting quize!");
			Transport.send(message);
		} catch (MessagingException e) {
			e.printStackTrace();
		}
	}

}
